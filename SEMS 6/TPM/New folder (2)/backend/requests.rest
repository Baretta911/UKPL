### Auth Routes

# Register a new user
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "123123",
  "email": "test1@example.com",
  "password": "123123"
}

###

# Login a user
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "test.updated@example.com",
  "password": "123123"
}

### Store the token from login response (manual step)
@authToken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaWF0IjoxNzQ5MzIwMTc3LCJleHAiOjE3NDkzMjM3Nzd9.hnZtD54Fdxy2xDU_KVkypq-LHoJ9uI_vRgeC5SXg8yw

###

# Reset Password (Example - adjust payload as needed)
POST http://localhost:5000/api/auth/reset-password
Content-Type: application/json

{
  "email": "test@example.com"
}

### Product Routes

# Get all products (Requires authentication and admin role)
GET http://localhost:5000/api/products
Authorization: {{authToken}}

###

# Create a new product (Requires authentication and admin role)
POST http://localhost:5000/api/products
Authorization: {{authToken}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="name"

Awesome Toy
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="description"

This is a really cool toy.
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="price"

19.99
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="stock"

100
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="productImage"; filename="toy.jpg"
Content-Type: image/jpeg

< ./path/to/your/toy.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

###

# Get a product by ID (Requires authentication and admin role, Example ID: 1)
GET http://localhost:5000/api/products/2
Authorization: {{authToken}}

###

# Update a product (Requires authentication and admin role, Example ID: 1)
PUT http://localhost:5000/api/products/2
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Updated Awesome Toy",
  "description": "This is an updated description for the cool toy.",
  "price": 21.99,
  "stock": 90
}

###

# Delete a product (Requires authentication and admin role, Example ID: 1)
DELETE http://localhost:5000/api/products/2
Authorization: {{authToken}}


### User Routes

# Get user profile (Requires authentication)
GET http://localhost:5000/api/users/profile
Authorization: {{authToken}}

###

# Update user profile (Requires authentication)
PUT http://localhost:5000/api/users/profile
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Test User Updated Name",
  "email": "test.updated@example.com"
}

###

# Get all users (Requires authentication and admin role)
GET http://localhost:5000/api/users
Authorization: {{authToken}}

###

# Delete a user (Requires authentication and admin role, Example ID: 1)
# Note: Be careful with this, ensure the user ID is correct.
DELETE http://localhost:5000/api/users/1
Authorization: {{authToken}}


### Order Routes

# Create a new order (Requires authentication)
POST http://localhost:5000/api/orders
Content-Type: application/json
Authorization: {{authToken}}

{
  "totalAmount": 50.99,
  "items": [
    { "productId": 3, "quantity": 2, "price": 19.99 },
    { "productId": 3, "quantity": 1, "price": 11.01 }
  ]
}

###

# Get order by ID (Requires authentication, Example ID: 1)
GET http://localhost:5000/api/orders/1
Authorization: {{authToken}}

###

# Get all orders for the authenticated user (Requires authentication)
GET http://localhost:5000/api/orders
Authorization: {{authToken}}

###

# Update an order (Requires authentication, Example ID: 1)
# Note: The exact fields for updating an order might vary based on your controller logic.
PUT http://localhost:5000/api/orders/1
Content-Type: application/json
Authorization: {{authToken}}

{
  "status": "shipped"
}

###

# Delete an order (Requires authentication, Example ID: 1)
DELETE http://localhost:5000/api/orders/1
Authorization: {{authToken}}

